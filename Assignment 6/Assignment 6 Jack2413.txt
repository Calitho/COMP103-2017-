// This program is copyright VUW.
// You are granted permission to use it to construct your answer to a COMP103 assignment.
// You may not distribute it in any other way without permission.

/* Code for COMP 103, Assignment 6
 * Name:
 * Usercode:
 * ID:
 */
import java.util.*;
import java.io.*;
import ecs100.*;

/** 
 *  Implementation of a Set type using a Binary Search Tree to store
 *  the items.
 *  
 *  The Set does not allow null elements and obviously no duplicates. 
 *  
 *  Attempting to add null should throw an exception. 
 *  An attempt at adding an element which is already present
 *  should simply return false, without changing the set.
 *  
 *  @author: Thomas Kuehne (based on previous code)
 */
public class BSTSet <E extends Comparable<E>> extends AbstractSet <E> {

    // the root of the supporting binary search tree
    private BSTNode<E> root;

    // number of elements in the set
    private int count;

    /**
     * Returns true if the set is empty 
     */
    public boolean isEmpty() {
        return count == 0;
    }

    /**
     * Returns the number of elements in set 
     */
    public int size() {
        return count;
    }

    /** 
     * Returns true if the set contains 'item'
     * 
     * CORE
     *
     * HINT: There is no need to search for 'null' arguments. 
     * 
     * HINT: After checking special cases, delegate the work to the root
     * node of the supporting tree. 
     *
     *@param item - the item to check for
     *
     */
    public boolean contains(E item) throws ClassCastException {
        if(isEmpty())return false;
        if(root.contains(item))return true;
        return false;

    }

    /** 
     * Adds the specified element to the set, as long as it is not 
     * null or is not already in the set. 
     * 
     * CORE
     * 
     * HINT: Remember to update the count field as well. 
     * 
     * HINT: You can check whether the item exists already in an extra step
     * or perform the checking while attempting to add the item. The latter is
     * more efficient.
     * 
     * @param item - the item to be added
     * 
     * @returns true if the collection changes, and false if it does not change. 
     * 
     */
    public boolean add(E item) {
        if (item == null) 
            throw new IllegalArgumentException("Null cannot be added to a BSTSet");
        if(this.contains(item))return false;
        if(isEmpty()){
            root=new BSTNode<E>(item);
            count++;
            return true;
        }
        else {
            root.add(item);
            count++;
            return true;

        } 

    }
    /** 
     * Returns the height of the tree. 
     * 
     * CORE
     * 
     * HINT: You probably want to make use of method 'height()' in 
     * class BSTNode.
     * 
     * @returns the height of the tree 
     * -1 if the tree is empty,
     * 0 if there is just a root node, and
     * greater than 0 in all other cases.
     * 
     */
    public int height() {
        if(isEmpty()) return -1;
        
        else
            return root.height();


    }

    /** 
     * 
     * Returns the minimum depth of the tree. 
     * 
     * COMPLETION  
     * 
     * HINT: You probably want to make use of method 'minDepth()' in 
     * class BSTNode.
     * 
     * @returns the length of the shortest branch in the tree 
     * -1 if the tree is empty,
     * 0 if there is just a root node, and
     * greater than 0 in all other cases.
     * 
     */
    public int minDepth() {
        if(isEmpty()) return -1;
        if(root.getValue()==null) return 0;
        else
            return root.minDepth();

    }

    /** 
     *  Removes the element matching a given item. 
     *  
     *  COMPLETION
     *  
     *  Note that any children of the removed node must be kept in the tree. 
     *  
     *  HINT: Remember to update the count field, if necessary.
     *  HINT: A null item need not be removed.
     *  HINT: You may use 'remove(...)' from class BSTNode as a helper,
     *  but you do not have to. 
     *  
     *  @param item - the item to remove
     *  @returns true if the collection changes, and false if it did not change. 
     */
    public boolean remove(E item) {
        if (contains(item)){
            root.remove(item);
            count--;
            return true;
        }

        return false;
    }

    /** 
     * @returns an iterator over the elements in this set. 
     */
    public Iterator <E> iterator() {
        // start a new iteration on the root node
        return new BSTSetIterator(root);
    }

    /** 
     *  Iterator for BST.
     *  
     *  CHALLENGE
     *  
     *  Iterates through the tree in sorted order, i.e. using in-order traversal.
     *  Uses a stack to keep track of the current position (iteration state).
     *  
     *  HINTS:
     *  To accomplish this, the iterator must process
     *  the complete left subtree of a node before it processes the node.
     *  Therefore, every time it pushes a node on the stack, it can
     *  also immediately push all the left descendents of the node on
     *  to the stack, all the way to the leftmost descendent. 
     *  
     *  When it pops a node from the stack, it processes the node and then
     *  pushes its right child onto the stack (and all that child's
     *  left descendents).
     *  
     *  There is a dedicated video on Blackboard 
     *  -- "Comp103, Iterative In-Order Traversal, Variant 2" --
     *  explaining this particular approach. 
     *  
     *  You may choose another approach as well. 
     */
    private class BSTSetIterator implements Iterator<E> {

        Stack<BSTNode<E>> nodeStack = new Stack<BSTNode<E>>();

        /**
         * Creates an iterator.
         * 
         * CHALLENGE
         * 
         * HINT: Populate the 'to do' stack as much as necessary already. 
         */
        public BSTSetIterator(BSTNode<E>root) {
            /*# YOUR CODE HERE */

        }

        /**
         * Returns whether there is still something to iterate
         * 
         * CHALLENGE
         * 
         */
        public boolean hasNext() {
            /*# YOUR CODE HERE */

            return false;  // DOESN'T WORK - Just to make this stub compile
        }

        /**
         * Returns the next element of the current iteration. 
         * 
         * CHALLENGE
         * 
         * HINT: Remove an element from the 'to do' stack and return it, but before
         * returning, make sure you add new elements to the stack, if appropriate. 
         * 
         */
        public E next() {
            /*# YOUR CODE HERE */

            return null;  // DOESN'T WORK - Just to make this stub compile
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    /**
     * Prints all the elements to a stream.
     * 
     * @param stream - the output stream 
     */
    public void printAllToStream(PrintStream stream) {
        // if there is nothing to do...
        if (isEmpty())
            return;

        // traverse tree, passing on the output stream
        root.printAllToStream(stream);
    }

    public static void main(String[] args){
        testing();
    }

    public static void testing(){
        BSTSet<String> testBST = new BSTSet<String>();

        String[] testItems = new String[]{"N", "G", "T", "C", "W", "O", "K", "U", "V", "E", "Y", "Z", "S", "A", "M", "P", "R", "I", "L", "F", "J", "B", "D", "H", "X", "Q"};

        for (String item : testItems) {
            UI.println("Adding "+item);
            testBST.add(item);
            UI.println("----------------------------");

            if (testBST.isEmpty()) 
                UI.println("Empty Tree");
            else 
                testBST.printAll();

            UI.println("Height: "+testBST.height());
            UI.println("Min Depth: "+testBST.minDepth());
            UI.println("----------------------------");
        }
    }

    public void printAll(){
        root.printAll("");
    }
}

/ This program is copyright VUW.
// You are granted permission to use it to construct your answer to a COMP103 assignment.
// You may not distribute it in any other way without permission.

/* Code for COMP 103, Assignment 6
 * Name:
 * Usercode:
 * ID:
 */
import java.io.*;
import ecs100.*;

/**  
 * Implements a binary search tree node.
 *   
 *  @author: Thomas Kuehne (based on previous code)
 */

public class BSTNode <E extends Comparable<E>> {

    private E value;
    private BSTNode<E> left;
    public BSTNode<E> right;

    int mindepth;

    // constructs a node with a value
    public BSTNode(E value) {
        this.value = value;
    }

    // Getters...

    public E getValue() {
        return value;
    }

    public BSTNode<E> getLeft() {
        return left;
    }

    public BSTNode<E> getRight() {
        return right;
    }

    /** 
     * Returns true if the subtree formed by the receiver contains 'item'
     * 
     * CORE
     *
     * ASSUMPTION: 'item' is not 'null'.
     * 
     * HINT: A recursive approach leads to a very short and simple code. 
     * 
     * HINT: use 'compareTo(...)' in order to compare the parameter 
     * with the data in the node. 
     * 
     * HINT: Make sure that you invoke 'compareTo' by always using
     * the same receiver / argument ordering throughout the program, e.g., 
     * always use the item as the receiver of 'compareTo'.
     *
     *@param item - the item to check for
     *@returns true if the subtree contained 'item'
     *
     */
    public boolean contains(E item) {
        if(item==null) return false;
        if(item.compareTo(value)==0)return true;

        if(item.compareTo(value)<0&&left!=null) return left.contains(item);
        if(item.compareTo(value)>0&&right!=null) return right.contains(item);

        // no matching node was found
        return false;
    }

    /**
     * Adds an item to the subtree formed by the receiver.
     * 
     * CORE
     * 
     * Must not add an item, if it is already in the tree.
     * 
     * HINT: use 'compareTo(...)' in order to compare the parameter 
     * with the data in the node. 
     * 
     * @param item - the value to be added
     * @returns false, if the item was in the subtree already. Returns true otherwise.
     */
    public boolean add(E item) {
        if(contains(item))return false;
        if(item.compareTo(value)<0){
            if(left==null)left=new BSTNode<E>(item);
            return left.add(item);

        }
        else if(item.compareTo(value)>0){
            if(right==null)right=new BSTNode<E>(item);
            return right.add(item);

        }

        // not proper code, just needed to enable compilation
        return false;
    }

    /**
     * Returns the height of the receiver node.
     * 
     * CORE 
     * 
     * HINT: The number of children the receiver node may have, implies
     * four cases to deal with (none, left, right, left & right).
     * 
     * @returns the height of the receiver
     */
    public int height() {
        int heightL = -1;
        int heightR = -1;
        
        if(this.left!=null)
            heightL = left.height();
        if(this.right!=null)
            heightR = right.height();
        if(heightL > heightR){
            return heightL+1;
        }
        else{
            return heightR+1;
        }
    }

    /**
     * Returns the length of the shortest branch in the subtree formed by the receiver.
     * 
     * COMPLETION
     * 
     * @returns the minimum of all branch lenghts starting from the receiver. 
     * 
     */
    public int minDepth() {      
        if (this == null)
            return 0;

        // Base case : Leaf Node. This accounts for height = 1.
        if (this.left == null && this.right == null)
            return 0;

        // If left subtree is NULL, recur for right subtree
        if (this.left == null)
            return this.right.minDepth() + 1;

        // If right subtree is NULL, recur for right subtree
        if (this.right == null)
            return this.left.minDepth() + 1;

        return Math.min(this.left.minDepth(),
            this.right.minDepth()) + 1;

    }

    /** 
     *  Removes an item in the subtree formed by the receiver.
     *  
     *  COMPLETION
     *  
     *  ASSUMPTION: The item to be removed does exist. 
     *  The case that it cannot be found, should be dealt with before this method is called.
     *  
     *  Performs two tasks:
     *  1. locates the node to be removed, and
     *  2. replaces the node with a suitable node from its subtrees.
     *  
     *  HINT: use 'compareTo(...)' in order to compare the parameter 
     *  with the data in the node. 
     * 
     *  HINT: For task 2, you should use call method 'replacementSubtreeFromChildren'
     *  to obtain this node. 
     *  
     *  HINT: When replacing a node, it is sufficient to change the value of the existing node
     *  with the value of the node that conceptually replaces it. There is no need to actually 
     *  replace the node object as such. 
     *  
     *  @param item - the item to be removed
     *  @returns the reference to the subtree with the item removed.
     *  
     *  HINT: Often the returned reference will be the receiver node, but it is possible that
     *  the receiver itself needs to be removed. If you use a recursive approach, the
     *  latter case is the base case. 
     *   
     */
    public BSTNode<E>remove(E item) {

        if(item.compareTo(value) < 0){
            if(left != null){
                left= this.left.remove(item);
            }

        }
        else if(item.compareTo(value)>0){
            if(right!=null){
                right= this.right.remove(item);
            }
        }
        else{
            return replacementSubtreeFromChildren(this.left, this.right);
            //this.left = replacementSubtreeFromChildren(this.left.left, this.left.right);
            //this.right = replacementSubtreeFromChildren(this.right.left, this.right.right);
        }

        // there was no need to replace the receiver node
        return this;  
    }

    /**
     *  Returns a replacement subtree for the receiver node (which is to be removed).
     *  
     *  COMPLETION
     *  
     *  The replacement subtree is determined from the children of the node to be removed.
     *  
     *  HINT: There are several cases:
     *  - node has no children    => return null
     *  - node has only one child => return the child
     *  - node has two children   => return the current subtree but with
     *       a) its (local) root replaced by the leftmost node in the right subtree, and
     *       b) the leftmmost node in the right subtree removed.
     *       
     * @param left - the left subtree from which to include items.       
     * @param right - the right subtree from which to include items.       
     * @returns a reference to a subtree which contains all items from 'left' and 'right' combined.      
     *                                          
     */
    private BSTNode<E> replacementSubtreeFromChildren(BSTNode<E> left, BSTNode<E> right) {
        if(left == null)return right;
        if(right == null)return left;
        BSTNode<E> LeftMostNode=right.getLeftmostNode();
        value=LeftMostNode.value;
        this.right=right.remove(value);

        return this;

    }

    /**
     *  Returns the leftmost node in the subtree formed by the receiver. 
     *  
     *  COMPLETION
     *  
     *  HINT: The code is very simple. Just keep descending left branches, 
     *  until it is no longer possible. 
     * 
     * @returns a reference to the leftmost node, starting from the receiver.    
     *                                          
     */
    private BSTNode<E> getLeftmostNode() {

        if(left == null)return this;
        else return left.getLeftmostNode();

    }

    /**
     * Prints all the nodes in a subtree to a stream.
     * 
     * @param stream - the output stream 
     */
    public void printAllToStream(PrintStream stream) {
        if (left!=null) 
            left.printAllToStream(stream);

        stream.println(value);

        if (right!=null) 
            right.printAllToStream(stream);
    }

    /**
     * Prints all the nodes in a subtree on the text pane.
     * 
     * Can be useful for debugging purposes, but 
     * is most useful on small sample trees. 
     * 
     * Usage: node.printAll("").
     */
    public void printAll(String indent){
        if (right!=null)
            right.printAll(indent+"    ");

        UI.println(indent + value);

        if (left!=null) 
            left.printAll(indent+"    ");
    }
}